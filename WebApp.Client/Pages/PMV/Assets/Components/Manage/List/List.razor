@page "/asset/manage/{view}/{type?}/{category?}/{status?}"
@using WebApp.Client.Pages.PMV.Assets.ViewModels;
@using WebApp.UILibrary;


@inherits ComponentViewModelBase<AssetListViewModel>
@inject DialogService DialogService


@attribute [Authorize()]

<CustomPageLayout>
    <CustomLayoutHeader Title="Manage Asset" Icon="directions_bus">
        
        @if(View != "read") {
            <RadzenButton Text="Add Internal" Icon="front_loader" Click="@(() => HandleAction("/asset/form/internal"))" />
            <RadzenButton Text="Add External" Icon="directions_car" Click="@(() => HandleAction("/asset/form/external"))" />
        }

        <RadzenButton Text="Export to Excel" Icon="excel" ButtonStyle="ButtonStyle.Dark" Click="@(() => HandleExportClick())" />
        
    </CustomLayoutHeader>

    <RadzenStack Style="padding-top: 15px">
        <RadzenTabs @bind-SelectedIndex=@SelectedIndex  TabPosition="TabPosition.Top" class="w-100">
            <Tabs>
                <RadzenTabsItem Text="Internal">
                    <AssetList Status=@Status EditMode="@View"/>
                </RadzenTabsItem>
                <RadzenTabsItem Text="External">
                    <ExternalList EditMode="@View"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenStack>

</CustomPageLayout>

@code {

    [Parameter]
    public string? Status { get; set; } = "";

    [Parameter]
    public string? Category { get; set; } = "";

    [Parameter]
    public string? Type { get; set; } = "";

    [Parameter]
    public string View { get; set; } = "";

    public int SelectedIndex { get; set; } = 0;

    [CascadingParameter]
    public required Task<AuthenticationState> AuthState { get; set; }


    protected override async Task  OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {

            if (!string.IsNullOrEmpty(Status))
            {
                if(Type == "external")
                {
                    Model.FilterAsset.PlateType = Category;
                }
                else
                {
                    Model.FilterAsset.Status = Status;
                    Model.FilterAsset.Category = Category;
                }

                Model.FilterAsset.AssetType = Type ?? "internal";
                Model.FilterAsset.IsRefresh = true;
                Model.FilterAsset.IsPostBack = true;
                SelectedIndex = Type == "external" ? 1 : 0;
                
                await Model.Filter();
            }
            else
            {
                //initialize when first render
                if (Model.AssetListContainer.Categories.Count <= 0)
                {
                    await Model.Initialize();
                }
            }
        }
    }

    private void HandleAction(string navigate) {
        PageNavigation.NavigateTo(navigate);
    }

    private async Task HandleExportClick()
    {
        var result = await DialogService.OpenAsync<AssetExportDialog>("Export Excel",
            new Dictionary<string, object>() {{ "Filter", Model.FilterAsset }});

        //Model.ExportToExcel();
    }

   
}






