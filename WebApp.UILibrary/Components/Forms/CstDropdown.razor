@using WebApp.UILibrary.Commons;

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5px" Style="position:relative">
    <RadzenTextBox @bind-Value="@SearchValue" @oninput="@((args) => HandleChange(args.Value))" />
    <RadzenButton Variant="Variant.Flat" Text="..." Size="ButtonSize.Small" Click="HandleToggle" />
    <RadzenListBox 
        TValue="string"
        Data="Data"
        ValueProperty=@ValueProperty
        TextProperty="@TextProperty"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                   FilterOperator="StringFilterOperator.StartsWith"
        @bind-Value="BindValue"
        Style="@($"{DisplayShow()};position:absolute;left:0;bottom:-200px;height: 200px;min-width:240px;z-index:99999")" />
</RadzenStack>

@code {

    [Parameter]
    public string BindValue { get; set; } = "";
    [Parameter]
    public string? ValueProperty { get; set; }
    [Parameter]
    public string? TextProperty { get; set; }
    [Parameter]
    public List<SelectItem> Data { get; set; } = new();

    private string SearchValue = "";

    private bool IsShow = false;

    private string DisplayShow()
    {
        return IsShow ? "display:blocked" : "display:none";
    }


    protected void HandleChange(object? args)
    {
        var strArgs = args == null ? "" : (string)args;
        IsShow = true;
        BindValue = strArgs;
        StateHasChanged();
    }

    protected void HandleToggle()
    {
        IsShow = !IsShow;
        StateHasChanged();
    }
}
